<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 打开Spring的Annotation支持 -->
	<context:annotation-config />

	<!-- 设定Spring 去哪些包中找Annotation -->
	<context:component-scan base-package="org.gzccc.oa" />

	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <value>classpath:jdbc.properties</value>
              <value>classpath:mail.properties</value>
            </list>  
        </property>  
    </bean>  

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />
		<property name="maxWait" value="1000" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--<property name="configLocation" value="classpath:mybatis.xml"/> -->
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<!-- mybatis自动设置别名 -->
		<property name="typeAliasesPackage" value="org.gzccc.oa.bean" />
		<property name="plugins">
			<array>
				<ref bean="idGeneratorPlugin" />
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- mybatis ID自动生成插件 -->
	<bean id="idGeneratorPlugin" class="org.gzccc.oa.plugins.IdGeneratorInterceptor">
		<property name="idGenerator" ref="idGenerator" />
	</bean>

	<bean id="idGenerator" class="org.gzccc.oa.plugins.DefaultIdGenerator" />

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.gzccc.oa.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 创建事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<aop:config>
		<aop:pointcut id="allMethods"
			expression="execution(* org.gzccc.oa.service.*.*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法(织入通知) -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>
	<!-- 配置哪些方法要加入事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" /> 
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="*" rollback-for="Exception" propagation="REQUIRED" />
        </tx:attributes> 
	</tx:advice>

	<!-- aop自动代理 -->
	<!-- <aop:aspectj-autoproxy /> -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 自定义后台验证策略 -->
	<!-- <bean id="myStrategy" class="org.gzccc.oa.validator.DefaultValidate"/> 
		<bean id="premission" class="org.gzccc.oa.validator.ValidatorPremission"/> -->
</beans>